version: '3.8'

services:
    mongo:
        container_name: ms_mongo
        image: mongo:latest
        ports:
            - "27017:27017"
        volumes:
            - "./mongo/db:/data/db"

    redis:
        image: redis:latest
        container_name: redis
        ports:
            - 6379:6379

    #Nginx container
    nginx:
        image: nginx
        #container_name: nginx
        #hostname: nginx
        #build: ${PWD}/config/nginx
        #Expose port 80 to allow users to hit content and generate data for filebeat and packetbeat
        ports: ['80:80']
        command: nginx -g 'daemon off;'
        volumes:
            #Logs are mounted to a relative path. These are also accessed by Filebeat and consumed by the Nginx module
            - ./logs/nginx/:/var/log/nginx/
        environment:
            - NGINX_HOST=localhost
            - NGINX_PORT=80
            #links:
            #- petstore
            #- users
    prometheus:
        image: prom/prometheus:latest
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        ports:
            - 9090:9090
        links:
            - cadvisor:cadvisor
        depends_on:
            - cadvisor
        restart: always
    grafana:
        image: grafana/grafana
        user: "0" #[ Execute  id -u in terminal to find the user id from where you are invoking docker compose]
        volumes:
            - ./grafana/db:/var/lib/grafana
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=testpass
        depends_on:
            - prometheus
        ports:
            - '3000:3000'
    cadvisor:
        image: google/cadvisor
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
        ports:
            - 8080:8080
        restart: always
        deploy:
            mode: global



    zoo1:
        image: zookeeper:3.4.9
        hostname: zoo1
        ports:
            - "2181:2181"
        environment:
            ZOO_MY_ID: 1
            ZOO_PORT: 2181
            ZOO_SERVERS: server.1=zoo1:2888:3888
        volumes:
            - ./zookeeper/data:/data
            - ./zookeeper/datalog:/datalog

    kafka1:
        image: confluentinc/cp-kafka:5.5.1
        #image: wurstmeister/kafka:5.5.1
        hostname: kafka1
        ports:
            - "9092:9092"
        environment:
            KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
            KAFKA_BROKER_ID: 1
            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        volumes:
            - ./kafka/data:/var/lib/kafka/data
        depends_on:
            - zoo1
